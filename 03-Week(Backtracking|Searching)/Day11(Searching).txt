Sorting
	
	Binary Search-

		1-Note- Suppose in searching if element is not found then the low points to next smaller than x and high points to next greater number than x.

		2-lower_bound implementation
			if(A[mid]<x)
				low=mid+1;
			else if(A[mid]>x)
				high =mid-1;
			else if(mid!=0  && A[mid]==x && A[mid-1]==x)
				high =mid-1;
			else 
				return mid;

		3-similar for upper bound

		4-finding point of partition in rotated sorted array
			int temp=arr[n-1]
			if(mid!=0 arr[mid]>arr[mid+1] && arr[mid]<arr[mid-1]) return mid;
			if(arr[mid]<=temp)
			{
				high=mid-1;
			}
			else if(arr[mid]>temp)
			{
				low=mid-1;
			}


			int findPivot(const vector<int> &arr, int low, int high) 
			{ 
			  if (high < low) return -1; 
			  if (high == low) return low; 
			  
			   int mid = (low + high)/2; 
			   if (mid < high && arr[mid] > arr[mid + 1]) 
			    return mid; 
			      
			   if (mid > low && arr[mid] < arr[mid - 1]) 
			    return (mid-1); 
			      
			   if (arr[low] >= arr[mid]) 
			    return findPivot(arr, low, mid-1); 
			      
			   return findPivot(arr, mid + 1, high); 
			} 

		5- Find peak element in the array, and return that peak element, if not found return -1;

		Approach- Go to mid if(arr[mid]>arr[mid+1] && arr[mid]> arr[mid-1]) 
					return mid;
				else if(arr[mid]<arr[mid+1])
					go to right
				else if(arr[mid]<arr[mid-1])
					go to left

		6- Return floor(sqrt(n)) by binary search

		Approach- Search between range


		7- Given sorted array every element except one occurs once, rest occurs twice, find the number.

		Approach- For every number the element which occurs twice will be have first occurence at odd index and second index at even index , but after the occurence of lonely element, the element that is occuring twice will be at even and odd index.

		8- Given unsorted array find kth smallest element.
			low=min(array)
			high =max(array)

			mid=(low+high)/2;
			x=number of element less than k
			if(x<k-1)
				low=mid+1;
			else
				high=mid-1
			Approach 2: Quickselect
			Approach 3: Using heap

		Learn order statistics; find kth smallest element

		9- Given sorted array containing duplicates, find kth smallest element
			x1= number of element smaller than m
			x2= number of element greater than m

			if(x1+x2==n) then element is not present
			else it(x1+x2) will be always less than n

			if k-1 lies between (l,r), then mid is the ans

			if(k-1<r)
				low=mid+1;		
			else if(k-1>l)
				high=mid-1;

		10- You have N*M matrix where each row is sorted, and N*M is odd
			mini=overall min
			maxi=overall max

			ans range = mini to maxi

			int desired = (r * c + 1) / 2; 
			    while (min < max) 
			    { 
			        int mid = min + (max - min) / 2; 
			        int place = 0; 
			        for (int i = 0; i < r; ++i) 
			            place += upper_bound(m[i].begin(), m[i].begin()+c, mid) - m[i].begin(); 
			        if (place < desired) 
			            min = mid + 1; 
			        else
			            max = mid; 
			    } 
			    return min; 

	Homework
		median of two sorted array

		