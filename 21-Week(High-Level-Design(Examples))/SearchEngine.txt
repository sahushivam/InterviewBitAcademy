MVP
	Designing a web crawler
	Implementing an Inverted index for fast retrievals
	Designing a search type ahead

	1 - Crawling --->  Indexing 
	2 - Query

Design Choices
	low-latency
	high throughput -(lot of query at a given time)

Inverted Table
	1- Remove all stop words from documents
	2- Steaming (getting the root word)
	3- Lemminazation (Converting word in correct English word)

Query
	Conjuctive (of keywords)
	Disjunctive 

Design a web crawler

	MVP
		Politeness/Crawl Rate
		DNS query
		Distributed Crawling
		Priority Crawling
		Duplicate detection

	Scale
		900 million website
		500 million functional website / 100 pages average
		120 KB --page
		6PB of memory 

	Design
		Storage - BigTable, HDFS
		Bandwidth - 
			Web crawling is bandwidth intensive, ensure there is enough bandwidth to sustain high throughputWeb crawlerwling is bandwidth intensive, ensure there is enough bandwidth to sustain high throughput
	Deep Dive

		API 
			def add_link_to_crawl(self, url):
		    def remove_link_to_crawl(self, url):
		    def reduce_priority_link_to_crawl(self, url)
		    def extract_max_priority_page(self):   
		    def insert_crawled_link(self, url, signature):
		        """ Add the given link to crawled_links """
		    def crawled_similar(self, signature):
		        """Determine if we've already crawled a page matching the given signature"""

		Components
		Seed URL --->  URL Frontier    \  
										\
										 \	
										  \ 
										   \
		URL Filter <--- URL Extracter <-- Fetchers + Renders  ---> DNS Resolver(Custom)
			|									|
			|									|
		IsCrawled(0/1)							|
											    |
										Storage + Cache


		Web Crawler working ---
		Priority --->  QUeues(1-N) ---> BackQueueRouters ----> Back Queue(1-M) --- Threads(1-M)
										 (Politeness)


	We can detect the updates by HEAD request
	We can detect the duplicates by hashing
		
		How to check if URL has been visited or not

		Bloom- Filters
			It is used to check whether given element is present in the list or not present

			It is a probabilistic data-structure
				present  -- 90% sure
				not present --100% sure
			It takes less storage than hash table

		Implementation

			Req - Bit Array(0), two hash functions
			Working
				set 1 to output of two hashes in bit array

			Instead of bit array we can use number in an array generated by hash.

Bottle-neck
	DNS Lookup
Key Terms
	Robot.txt : It is standard used by website to communicate to web crawler.
