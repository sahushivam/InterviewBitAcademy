Stairs
	You are climbing a stair case and it takes A steps to reach to the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
	
	f(n) = f(n-1) + f(n-2)

Bitonic Array
	Find lis and lds
	ans = max(ans, lis[i]+lds[i]-1)

Min Jump Array
	Given an array of non-negative integers, A, of length N, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Return the minimum number of jumps required to reach the last index. If it is not possible to reach the last index, return -1.

	steps=1, curr=A[0], max=A[0]
	for(i=1;i<n;i++)
	{
		if(curr >= n-1) return steps
		if(i<=curr) max=max(A[i],curr)
		if(i==curr) 
		{
			curr = max(curr,max);
			steps++;
		}
	}

Coin in a line
		There are two choices:
	1. The user chooses the ith coin with value Vi: The opponent either chooses (i+1)th coin or jth coin. The opponent intends to choose the coin which leaves the user with minimum value.
	i.e. The user can collect the value Vi + min(F(i+2, j), F(i+1, j-1) )

	2.  The user chooses the jth coin with value Vj: The opponent either chooses ith coin or (j-1)th coin. The opponent intends to choose the coin which leaves the user with minimum value.
	i.e. The user can collect the value Vj + min(F(i+1, j-1), F(i, j-2) )

Max Sum Without Adjacent Elements
	for(int i=0;i<A[0].size();i++)
    {
        int pre=inclusive;
        inclusive=exclusive+max(A[0][i],A[1][i]);//if we wont to include we should check that it is excluded 
                                                    //previously
        exclusive=max(exclusive,pre);
        //cout<<inclusive<<" "<<exclusive<<endl;
    }
    return max(exclusive,inclusive);

	